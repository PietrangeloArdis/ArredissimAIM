export interface Channel {
  id?: string;
  name: string;
  active: boolean;
  color?: string;
  icon?: string;
  /** Defines the media type for the channel */
  type: 'digital' | 'traditional';
  visibleKpis?: string[]; // KPI configuration
  subGroupingKey?: string | null; // New field for dynamic grouping
  createdAt?: string;
  updatedAt?: string;
}

export type ChannelName = string; // Dynamic channel names from Firestore

// Available sub-grouping options
export type SubGroupingKey = 'broadcaster' | 'campaign' | 'brand' | 'region' | null;

export interface SubGroupingOption {
  key: SubGroupingKey;
  label: string;
  description: string;
  icon: string;
}

export const AVAILABLE_SUB_GROUPINGS: SubGroupingOption[] = [
  {
    key: 'campaign',
    label: 'Campaign',
    description: 'Group by individual campaign (default)',
    icon: '📊'
  },
  {
    key: 'broadcaster',
    label: 'Broadcaster',
    description: 'Group by TV/Radio broadcaster or sponsorship',
    icon: '📺'
  },
  {
    key: 'brand',
    label: 'Brand',
    description: 'Group by brand name',
    icon: '🏢'
  },
  {
    key: 'region',
    label: 'Region',
    description: 'Group by geographic region',
    icon: '🗺️'
  }
];

// Default sub-grouping for different channel types
export const DEFAULT_CHANNEL_SUB_GROUPING: { [key: string]: SubGroupingKey } = {
  'TV': 'broadcaster',
  'Radio': 'broadcaster',
  'Meta': 'campaign',
  'Google': 'campaign',
  'TikTok': 'campaign',
  'Pinterest': 'campaign',
  'LinkedIn': 'campaign',
  'Cinema': 'campaign',
  'DOOH': 'campaign',
  'default': 'campaign'
};

// Default channel types
export const DEFAULT_CHANNEL_TYPES: { [key: string]: 'digital' | 'traditional' } = {
  'Meta': 'digital',
  'META': 'digital', // Handle both cases
  'Google': 'digital',
  'TikTok': 'digital',
  'Pinterest': 'digital',
  'LinkedIn': 'digital',
  'YouTube': 'digital',
  'TV': 'traditional',
  'Radio': 'traditional',
  'Cinema': 'traditional',
  'DOOH': 'traditional',
  'default': 'digital'
};

// Helper function to get default sub-grouping for a channel
export const getDefaultSubGroupingForChannel = (channelName: string): SubGroupingKey => {
  return DEFAULT_CHANNEL_SUB_GROUPING[channelName] || DEFAULT_CHANNEL_SUB_GROUPING.default;
};

// Helper function to get default type for a channel
export const getDefaultTypeForChannel = (channelName: string): 'digital' | 'traditional' => {
  return DEFAULT_CHANNEL_TYPES[channelName] || DEFAULT_CHANNEL_TYPES.default;
};

// Helper function to get sub-grouping option by key
export const getSubGroupingOption = (key: SubGroupingKey): SubGroupingOption | undefined => {
  return AVAILABLE_SUB_GROUPINGS.find(option => option.key === key);
};

// Helper function to get the grouping field value from a campaign
export const getCampaignGroupingValue = (campaign: any, groupingKey: SubGroupingKey): string => {
  switch (groupingKey) {
    case 'broadcaster':
      return campaign.publisher || 'No Broadcaster Specified';
    case 'brand':
      return campaign.brand || 'No Brand';
    case 'region':
      return campaign.region || 'No Region';
    case 'campaign':
    default:
      return `${campaign.brand} - ${campaign.region}`;
  }
};

// Available KPI options with metadata
export interface KPIOption {
  key: string;
  label: string;
  tooltip: string;
  category: 'universal' | 'digital' | 'traditional' | 'tv' | 'radio' | 'cinema' | 'dooh';
}

export const AVAILABLE_KPIS: KPIOption[] = [
  // Universal KPIs
  {
    key: 'leads',
    label: 'Leads',
    tooltip: 'Total number of leads generated by the campaign',
    category: 'universal'
  },
  {
    key: 'cpl',
    label: 'Cost Per Lead (€)',
    tooltip: 'Average cost to acquire one lead (Budget ÷ Leads)',
    category: 'universal'
  },
  {
    key: 'roi',
    label: 'ROI (%)',
    tooltip: 'Return on Investment percentage',
    category: 'universal'
  },
  
  // Digital KPIs
  {
    key: 'clicks',
    label: 'Clicks',
    tooltip: 'Total number of clicks on digital ads',
    category: 'digital'
  },
  {
    key: 'ctr',
    label: 'CTR (%)',
    tooltip: 'Click-through rate (Clicks ÷ Impressions × 100)',
    category: 'digital'
  },
  {
    key: 'cpm',
    label: 'CPM (€)',
    tooltip: 'Cost per thousand impressions',
    category: 'digital'
  },
  
  // Traditional Media KPIs
  {
    key: 'spotsPurchased',
    label: 'Spots',
    tooltip: 'Total number of advertising spots purchased',
    category: 'traditional'
  },
  {
    key: 'impressions',
    label: 'Impressions',
    tooltip: 'Estimated number of impressions (Radio/Digital)',
    category: 'traditional'
  },
  
  // TV-specific KPIs
  {
    key: 'expectedGrps',
    label: 'Expected GRPs',
    tooltip: 'Target Gross Rating Points for TV campaign reach measurement',
    category: 'tv'
  },
  {
    key: 'achievedGrps',
    label: 'Achieved GRPs',
    tooltip: 'Actual Gross Rating Points achieved vs target',
    category: 'tv'
  },
  
  // DOOH-specific KPIs
  {
    key: 'expectedViews',
    label: 'Expected Views',
    tooltip: 'Projected views of digital out-of-home signage',
    category: 'dooh'
  }
];

// Default KPIs for different channel types
export const DEFAULT_CHANNEL_KPIS: { [key: string]: string[] } = {
  'Meta': ['leads', 'cpl', 'roi', 'clicks', 'ctr'],
  'META': ['leads', 'cpl', 'roi', 'clicks', 'ctr'], // Handle both cases
  'Google': ['leads', 'cpl', 'roi', 'clicks', 'ctr'],
  'TikTok': ['leads', 'cpl', 'roi', 'clicks', 'ctr'],
  'Pinterest': ['leads', 'cpl', 'roi', 'clicks', 'ctr'],
  'LinkedIn': ['leads', 'cpl', 'roi', 'clicks', 'ctr'],
  'TV': ['expectedGrps', 'achievedGrps', 'spotsPurchased'],
  'Radio': ['spotsPurchased', 'impressions'],
  'Cinema': ['spotsPurchased', 'expectedViews'],
  'DOOH': ['expectedViews'],
  'default': ['leads', 'cpl', 'roi']
};

// Helper function to get default KPIs for a channel
export const getDefaultKPIsForChannel = (channelName: string): string[] => {
  return DEFAULT_CHANNEL_KPIS[channelName] || DEFAULT_CHANNEL_KPIS.default;
};

// Helper function to get KPI option by key
export const getKPIOption = (key: string): KPIOption | undefined => {
  return AVAILABLE_KPIS.find(kpi => kpi.key === key);
};

// Helper function to get visible KPIs for a channel with fallback
export const getVisibleKPIsForChannel = (channel: Channel | undefined): string[] => {
  if (channel?.visibleKpis && channel.visibleKpis.length > 0) {
    return channel.visibleKpis;
  }
  return getDefaultKPIsForChannel(channel?.name || '');
};